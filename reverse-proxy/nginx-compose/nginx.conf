# /etc/nginx/nginx.conf

# 전역 컨텍스트
user nginx;  # Nginx가 실행되는 사용자
worker_processes auto;  # 자동으로 워커 프로세스 수를 설정
pid /run/nginx.pid;  # PID 파일의 위치

events {
    worker_connections 1024;  # 최대 연결 수 설정
}

# HTTP 컨텍스트
http {
    # Upstream 블록
    upstream backend {
        ## ℹ️ localhost로 접근하면 127.0.0.1로 접근한다 하지만 Docker를 사용했기에 그러함
        server 192.168.64.1:8081;  # 첫 번째 백엔드 서버
        server 192.168.64.1:8082;  # 두 번째 백엔드 서버
    }

    # 서버 블록
    server {
        listen 80;  # 이 서버가 요청을 수신하는 포트

        # 위치 블록
        location / {
            #  ℹ️ 'backend' 업스트림 그룹으로 요청 전달 - Nginx가 전달 받은 요청을 해당 프록시로 전달
            #
            # 예시
            # Alice's Request --> Nginx (http://nginx.example.com/api/data)
            #          |
            #          V
            #       Backend Server (http://localhost:8080/api/data)
            proxy_pass http://backend;  
            # ℹ️ 사용자의 실제 IP를 확인 가능함
            #  ㄴ> 필요성 : 프록시 서버(예: NGINX)가 클라이언트와 서버 간의 중간 역할을 할 때, 백엔드 서버는 클라이언트의 원래 IP 주소를 알지 못함 내부에서 요청하기 때문임 
            #     ㄴ> ex) 단일 서버일 경우 127.0.0.1로 오던 IP가 Nginx로 구동 후 확인 결과 Client Access Ip is ::: 192.168.64.2
            proxy_set_header X-Real-IP $remote_addr;
            # ℹ️ 실제 IP 주소와 함께 기존의 X-Forwarded-For 헤더 값을 추가
            #  ㄴ> 필요성 : 여러 프록시 서버를 거치는 경우, 각 서버는 요청을 전달하면서 원래 클라이언트 IP와 이전 프록시 서버의 IP를 X-Forwarded-For 헤더에 추가합니다. 이를 통해 백엔드 서버는 요청이 거쳐온 전체 IP 주소 체인 확인 가능
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            #  ℹ️ 클라이언트가 원래 보낸 Server의 도메인 값 확인.
            #  ㄴ> 필요성 : 클라이언트가 보낸 Host 헤더는 원래 요청의 대상 도메인 이름을 나타냅니다. 
            proxy_set_header Host $http_host;
        }
    }
}
